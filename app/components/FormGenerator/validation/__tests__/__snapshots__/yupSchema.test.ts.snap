// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generate validation > should return correct validationSchema for one group having a text variable 1`] = `
{
  "someRootNameInData": {
    "default": {
      "someChildGroupNameInData": {
        "someNameInData": {
          "value": undefined,
        },
      },
    },
    "fields": {
      "someChildGroupNameInData": {
        "default": {
          "someNameInData": {
            "value": undefined,
          },
        },
        "fields": {
          "someNameInData": {
            "default": {
              "value": undefined,
            },
            "fields": {
              "value": {
                "default": undefined,
                "label": undefined,
                "meta": undefined,
                "notOneOf": [],
                "nullable": false,
                "oneOf": [],
                "optional": false,
                "tests": [
                  {
                    "name": "required",
                    "params": undefined,
                  },
                  {
                    "name": "matches",
                    "params": {
                      "regex": /\\(\\^\\[0-9A-ZÅÄÖ a-zåäö:-_\\]\\{3,50\\}\\$\\)/,
                    },
                  },
                ],
                "type": "string",
              },
            },
            "label": undefined,
            "meta": undefined,
            "notOneOf": [],
            "nullable": true,
            "oneOf": [],
            "optional": true,
            "tests": [],
            "type": "object",
          },
        },
        "label": undefined,
        "meta": undefined,
        "notOneOf": [],
        "nullable": false,
        "oneOf": [],
        "optional": true,
        "tests": [],
        "type": "object",
      },
    },
    "label": undefined,
    "meta": undefined,
    "notOneOf": [],
    "nullable": false,
    "oneOf": [],
    "optional": true,
    "tests": [],
    "type": "object",
  },
}
`;

exports[`generate validation > should return correct validationSchema for one repeating collectionVariable 1`] = `
{
  "someRootNameInData": {
    "default": {
      "colour": undefined,
    },
    "fields": {
      "colour": {
        "default": undefined,
        "innerType": {
          "default": {
            "value": undefined,
          },
          "fields": {
            "value": {
              "default": undefined,
              "label": undefined,
              "meta": undefined,
              "notOneOf": [],
              "nullable": true,
              "oneOf": [],
              "optional": true,
              "tests": [],
              "type": "string",
            },
          },
          "label": undefined,
          "meta": undefined,
          "notOneOf": [],
          "nullable": true,
          "oneOf": [],
          "optional": true,
          "tests": [],
          "type": "object",
        },
        "label": undefined,
        "meta": undefined,
        "notOneOf": [],
        "nullable": false,
        "oneOf": [],
        "optional": true,
        "tests": [
          {
            "name": "min",
            "params": {
              "min": 0,
            },
          },
          {
            "name": "max",
            "params": {
              "max": 3,
            },
          },
        ],
        "type": "array",
      },
    },
    "label": undefined,
    "meta": undefined,
    "notOneOf": [],
    "nullable": false,
    "oneOf": [],
    "optional": true,
    "tests": [],
    "type": "object",
  },
}
`;

exports[`generate validation > should return correct validationSchema for one textVar and one numberVar 1`] = `
{
  "someRootNameInData": {
    "default": {
      "someNameInData": {
        "value": undefined,
      },
      "someNumberVariableNameInData": {
        "value": undefined,
      },
    },
    "fields": {
      "someNameInData": {
        "default": {
          "value": undefined,
        },
        "fields": {
          "value": {
            "default": undefined,
            "label": undefined,
            "meta": undefined,
            "notOneOf": [],
            "nullable": false,
            "oneOf": [],
            "optional": false,
            "tests": [
              {
                "name": "required",
                "params": undefined,
              },
              {
                "name": "matches",
                "params": {
                  "regex": /\\^\\[a-zA-Z\\]\\$/,
                },
              },
            ],
            "type": "string",
          },
        },
        "label": undefined,
        "meta": undefined,
        "notOneOf": [],
        "nullable": true,
        "oneOf": [],
        "optional": true,
        "tests": [],
        "type": "object",
      },
      "someNumberVariableNameInData": {
        "default": {
          "value": undefined,
        },
        "fields": {
          "value": {
            "default": undefined,
            "label": undefined,
            "meta": undefined,
            "notOneOf": [],
            "nullable": false,
            "oneOf": [],
            "optional": true,
            "tests": [
              {
                "name": "matches",
                "params": {
                  "regex": /\\^\\[1-9\\]\\\\d\\*\\(\\\\\\.\\\\d\\+\\)\\?\\$/,
                },
              },
              {
                "name": "decimal-places",
                "params": {
                  "numberOfDecimals": 0,
                },
              },
              {
                "name": "min",
                "params": {
                  "min": 0,
                },
              },
              {
                "name": "max",
                "params": {
                  "max": 20,
                },
              },
            ],
            "type": "string",
          },
        },
        "label": undefined,
        "meta": undefined,
        "notOneOf": [],
        "nullable": true,
        "oneOf": [],
        "optional": true,
        "tests": [],
        "type": "object",
      },
    },
    "label": undefined,
    "meta": undefined,
    "notOneOf": [],
    "nullable": false,
    "oneOf": [],
    "optional": true,
    "tests": [],
    "type": "object",
  },
}
`;

exports[`generate validation > should return correct validationSchema for one textVar with a surrounding container 1`] = `
{
  "someRootNameInData": {
    "default": {
      "someNameInData": {
        "value": undefined,
      },
    },
    "fields": {
      "someNameInData": {
        "default": {
          "value": undefined,
        },
        "fields": {
          "value": {
            "default": undefined,
            "label": undefined,
            "meta": undefined,
            "notOneOf": [],
            "nullable": false,
            "oneOf": [],
            "optional": false,
            "tests": [
              {
                "name": "required",
                "params": undefined,
              },
              {
                "name": "matches",
                "params": {
                  "regex": /\\.\\+/,
                },
              },
            ],
            "type": "string",
          },
        },
        "label": undefined,
        "meta": undefined,
        "notOneOf": [],
        "nullable": true,
        "oneOf": [],
        "optional": true,
        "tests": [],
        "type": "object",
      },
    },
    "label": undefined,
    "meta": undefined,
    "notOneOf": [],
    "nullable": false,
    "oneOf": [],
    "optional": true,
    "tests": [],
    "type": "object",
  },
}
`;

exports[`generate validation > should return correct validationSchema for repeating group having a text variable 1`] = `
{
  "someRootNameInData": {
    "default": {
      "firstChildGroup": undefined,
    },
    "fields": {
      "firstChildGroup": {
        "default": undefined,
        "innerType": {
          "default": {
            "exampleNumberVar": {
              "value": undefined,
            },
          },
          "fields": {
            "exampleNumberVar": {
              "default": {
                "value": undefined,
              },
              "fields": {
                "value": {
                  "default": undefined,
                  "label": undefined,
                  "meta": undefined,
                  "notOneOf": [],
                  "nullable": true,
                  "oneOf": [],
                  "optional": true,
                  "tests": [
                    {
                      "name": "checkIfStringVariableHasSiblingsWithValuesInContext",
                      "params": undefined,
                    },
                  ],
                  "type": "string",
                },
              },
              "label": undefined,
              "meta": undefined,
              "notOneOf": [],
              "nullable": true,
              "oneOf": [],
              "optional": true,
              "tests": [],
              "type": "object",
            },
          },
          "label": undefined,
          "meta": undefined,
          "notOneOf": [],
          "nullable": true,
          "oneOf": [],
          "optional": true,
          "tests": [],
          "type": "object",
        },
        "label": undefined,
        "meta": undefined,
        "notOneOf": [],
        "nullable": false,
        "oneOf": [],
        "optional": true,
        "tests": [
          {
            "name": "min",
            "params": {
              "min": 0,
            },
          },
          {
            "name": "max",
            "params": {
              "max": 10,
            },
          },
        ],
        "type": "array",
      },
    },
    "label": undefined,
    "meta": undefined,
    "notOneOf": [],
    "nullable": false,
    "oneOf": [],
    "optional": true,
    "tests": [],
    "type": "object",
  },
}
`;

exports[`generate validation > should return correct validationSchema for repeating group having repeating child group with two name fields 1`] = `
{
  "someRootNameInData": {
    "default": {
      "author": undefined,
    },
    "fields": {
      "author": {
        "default": undefined,
        "innerType": {
          "default": {
            "name": undefined,
          },
          "fields": {
            "name": {
              "default": undefined,
              "innerType": {
                "default": {
                  "age": {
                    "value": undefined,
                  },
                  "firstName": {
                    "value": undefined,
                  },
                  "lastName": {
                    "value": undefined,
                  },
                },
                "fields": {
                  "age": {
                    "default": {
                      "value": undefined,
                    },
                    "fields": {
                      "value": {
                        "default": undefined,
                        "label": undefined,
                        "meta": undefined,
                        "notOneOf": [],
                        "nullable": false,
                        "oneOf": [],
                        "optional": true,
                        "tests": [
                          {
                            "name": "matches",
                            "params": {
                              "regex": /\\^\\[1-9\\]\\\\d\\*\\(\\\\\\.\\\\d\\+\\)\\?\\$/,
                            },
                          },
                          {
                            "name": "decimal-places",
                            "params": {
                              "numberOfDecimals": 0,
                            },
                          },
                          {
                            "name": "min",
                            "params": {
                              "min": 0,
                            },
                          },
                          {
                            "name": "max",
                            "params": {
                              "max": 125,
                            },
                          },
                        ],
                        "type": "string",
                      },
                    },
                    "label": undefined,
                    "meta": undefined,
                    "notOneOf": [],
                    "nullable": true,
                    "oneOf": [],
                    "optional": true,
                    "tests": [],
                    "type": "object",
                  },
                  "firstName": {
                    "default": {
                      "value": undefined,
                    },
                    "fields": {
                      "value": {
                        "default": undefined,
                        "label": undefined,
                        "meta": undefined,
                        "notOneOf": [],
                        "nullable": false,
                        "oneOf": [],
                        "optional": false,
                        "tests": [
                          {
                            "name": "required",
                            "params": undefined,
                          },
                          {
                            "name": "matches",
                            "params": {
                              "regex": /\\^\\[a-zA-Z\\]\\$/,
                            },
                          },
                        ],
                        "type": "string",
                      },
                    },
                    "label": undefined,
                    "meta": undefined,
                    "notOneOf": [],
                    "nullable": true,
                    "oneOf": [],
                    "optional": true,
                    "tests": [],
                    "type": "object",
                  },
                  "lastName": {
                    "default": {
                      "value": undefined,
                    },
                    "fields": {
                      "value": {
                        "default": undefined,
                        "label": undefined,
                        "meta": undefined,
                        "notOneOf": [],
                        "nullable": false,
                        "oneOf": [],
                        "optional": false,
                        "tests": [
                          {
                            "name": "required",
                            "params": undefined,
                          },
                          {
                            "name": "matches",
                            "params": {
                              "regex": /\\^\\[a-zA-Z\\]\\$/,
                            },
                          },
                        ],
                        "type": "string",
                      },
                    },
                    "label": undefined,
                    "meta": undefined,
                    "notOneOf": [],
                    "nullable": true,
                    "oneOf": [],
                    "optional": true,
                    "tests": [],
                    "type": "object",
                  },
                },
                "label": undefined,
                "meta": undefined,
                "notOneOf": [],
                "nullable": false,
                "oneOf": [],
                "optional": true,
                "tests": [],
                "type": "object",
              },
              "label": undefined,
              "meta": undefined,
              "notOneOf": [],
              "nullable": false,
              "oneOf": [],
              "optional": true,
              "tests": [
                {
                  "name": "min",
                  "params": {
                    "min": 1,
                  },
                },
                {
                  "name": "max",
                  "params": {
                    "max": 100,
                  },
                },
              ],
              "type": "array",
            },
          },
          "label": undefined,
          "meta": undefined,
          "notOneOf": [],
          "nullable": false,
          "oneOf": [],
          "optional": true,
          "tests": [],
          "type": "object",
        },
        "label": undefined,
        "meta": undefined,
        "notOneOf": [],
        "nullable": false,
        "oneOf": [],
        "optional": true,
        "tests": [
          {
            "name": "min",
            "params": {
              "min": 1,
            },
          },
          {
            "name": "max",
            "params": {
              "max": 10,
            },
          },
        ],
        "type": "array",
      },
    },
    "label": undefined,
    "meta": undefined,
    "notOneOf": [],
    "nullable": false,
    "oneOf": [],
    "optional": true,
    "tests": [],
    "type": "object",
  },
}
`;

exports[`generate validation > should return correct validationSchema for repeating group having repeating child group with two name fields and different attributes 1`] = `
{
  "someRootNameInData": {
    "default": {
      "author": undefined,
    },
    "fields": {
      "author": {
        "default": undefined,
        "innerType": {
          "default": {
            "_colourAttribute": undefined,
            "name": undefined,
          },
          "fields": {
            "_colourAttribute": {
              "default": undefined,
              "label": undefined,
              "meta": undefined,
              "notOneOf": [],
              "nullable": false,
              "oneOf": [],
              "optional": false,
              "tests": [
                {
                  "name": "required",
                  "params": undefined,
                },
              ],
              "type": "string",
            },
            "name": {
              "default": undefined,
              "innerType": {
                "default": {
                  "age": {
                    "value": undefined,
                  },
                  "firstName": {
                    "_colourAttribute": undefined,
                    "value": undefined,
                  },
                  "lastName": {
                    "value": undefined,
                  },
                },
                "fields": {
                  "age": {
                    "default": {
                      "value": undefined,
                    },
                    "fields": {
                      "value": {
                        "default": undefined,
                        "label": undefined,
                        "meta": undefined,
                        "notOneOf": [],
                        "nullable": false,
                        "oneOf": [],
                        "optional": true,
                        "tests": [
                          {
                            "name": "matches",
                            "params": {
                              "regex": /\\^\\[1-9\\]\\\\d\\*\\(\\\\\\.\\\\d\\+\\)\\?\\$/,
                            },
                          },
                          {
                            "name": "decimal-places",
                            "params": {
                              "numberOfDecimals": 0,
                            },
                          },
                          {
                            "name": "min",
                            "params": {
                              "min": 0,
                            },
                          },
                          {
                            "name": "max",
                            "params": {
                              "max": 125,
                            },
                          },
                        ],
                        "type": "string",
                      },
                    },
                    "label": undefined,
                    "meta": undefined,
                    "notOneOf": [],
                    "nullable": true,
                    "oneOf": [],
                    "optional": true,
                    "tests": [],
                    "type": "object",
                  },
                  "firstName": {
                    "default": {
                      "_colourAttribute": undefined,
                      "value": undefined,
                    },
                    "fields": {
                      "_colourAttribute": {
                        "default": undefined,
                        "label": undefined,
                        "meta": undefined,
                        "notOneOf": [],
                        "nullable": false,
                        "oneOf": [],
                        "optional": false,
                        "tests": [
                          {
                            "name": "required",
                            "params": undefined,
                          },
                        ],
                        "type": "string",
                      },
                      "value": {
                        "default": undefined,
                        "label": undefined,
                        "meta": undefined,
                        "notOneOf": [],
                        "nullable": false,
                        "oneOf": [],
                        "optional": false,
                        "tests": [
                          {
                            "name": "required",
                            "params": undefined,
                          },
                          {
                            "name": "matches",
                            "params": {
                              "regex": /\\^\\[a-zA-Z\\]\\$/,
                            },
                          },
                        ],
                        "type": "string",
                      },
                    },
                    "label": undefined,
                    "meta": undefined,
                    "notOneOf": [],
                    "nullable": true,
                    "oneOf": [],
                    "optional": true,
                    "tests": [],
                    "type": "object",
                  },
                  "lastName": {
                    "default": {
                      "value": undefined,
                    },
                    "fields": {
                      "value": {
                        "default": undefined,
                        "label": undefined,
                        "meta": undefined,
                        "notOneOf": [],
                        "nullable": false,
                        "oneOf": [],
                        "optional": false,
                        "tests": [
                          {
                            "name": "required",
                            "params": undefined,
                          },
                          {
                            "name": "matches",
                            "params": {
                              "regex": /\\^\\[a-zA-Z\\]\\$/,
                            },
                          },
                        ],
                        "type": "string",
                      },
                    },
                    "label": undefined,
                    "meta": undefined,
                    "notOneOf": [],
                    "nullable": true,
                    "oneOf": [],
                    "optional": true,
                    "tests": [],
                    "type": "object",
                  },
                },
                "label": undefined,
                "meta": undefined,
                "notOneOf": [],
                "nullable": false,
                "oneOf": [],
                "optional": true,
                "tests": [],
                "type": "object",
              },
              "label": undefined,
              "meta": undefined,
              "notOneOf": [],
              "nullable": false,
              "oneOf": [],
              "optional": true,
              "tests": [
                {
                  "name": "min",
                  "params": {
                    "min": 1,
                  },
                },
                {
                  "name": "max",
                  "params": {
                    "max": 100,
                  },
                },
              ],
              "type": "array",
            },
          },
          "label": undefined,
          "meta": undefined,
          "notOneOf": [],
          "nullable": false,
          "oneOf": [],
          "optional": true,
          "tests": [],
          "type": "object",
        },
        "label": undefined,
        "meta": undefined,
        "notOneOf": [],
        "nullable": false,
        "oneOf": [],
        "optional": true,
        "tests": [
          {
            "name": "min",
            "params": {
              "min": 1,
            },
          },
          {
            "name": "max",
            "params": {
              "max": 10,
            },
          },
        ],
        "type": "array",
      },
    },
    "label": undefined,
    "meta": undefined,
    "notOneOf": [],
    "nullable": false,
    "oneOf": [],
    "optional": true,
    "tests": [],
    "type": "object",
  },
}
`;

exports[`generate validation > should return correct validationSchema for two repeating variables 1`] = `
{
  "someRootNameInData": {
    "default": {
      "colour": {
        "value": undefined,
      },
      "someNameInData": undefined,
      "someNumberVariableNameInData": undefined,
    },
    "fields": {
      "colour": {
        "default": {
          "value": undefined,
        },
        "fields": {
          "value": {
            "default": undefined,
            "label": undefined,
            "meta": undefined,
            "notOneOf": [],
            "nullable": false,
            "oneOf": [],
            "optional": false,
            "tests": [
              {
                "name": "required",
                "params": undefined,
              },
            ],
            "type": "string",
          },
        },
        "label": undefined,
        "meta": undefined,
        "notOneOf": [],
        "nullable": true,
        "oneOf": [],
        "optional": true,
        "tests": [],
        "type": "object",
      },
      "someNameInData": {
        "default": undefined,
        "innerType": {
          "default": {
            "value": undefined,
          },
          "fields": {
            "value": {
              "default": undefined,
              "label": undefined,
              "meta": undefined,
              "notOneOf": [],
              "nullable": true,
              "oneOf": [],
              "optional": true,
              "tests": [
                {
                  "name": "matches",
                  "params": {
                    "regex": /\\^\\[a-zA-Z\\]\\$/,
                  },
                },
              ],
              "type": "string",
            },
          },
          "label": undefined,
          "meta": undefined,
          "notOneOf": [],
          "nullable": true,
          "oneOf": [],
          "optional": true,
          "tests": [],
          "type": "object",
        },
        "label": undefined,
        "meta": undefined,
        "notOneOf": [],
        "nullable": false,
        "oneOf": [],
        "optional": true,
        "tests": [
          {
            "name": "min",
            "params": {
              "min": 0,
            },
          },
          {
            "name": "max",
            "params": {
              "max": 2,
            },
          },
        ],
        "type": "array",
      },
      "someNumberVariableNameInData": {
        "default": undefined,
        "innerType": {
          "default": {
            "value": undefined,
          },
          "fields": {
            "value": {
              "default": undefined,
              "label": undefined,
              "meta": undefined,
              "notOneOf": [],
              "nullable": false,
              "oneOf": [],
              "optional": true,
              "tests": [
                {
                  "name": "matches",
                  "params": {
                    "regex": /\\^\\[1-9\\]\\\\d\\*\\(\\\\\\.\\\\d\\+\\)\\?\\$/,
                  },
                },
                {
                  "name": "decimal-places",
                  "params": {
                    "numberOfDecimals": 2,
                  },
                },
                {
                  "name": "min",
                  "params": {
                    "min": 0,
                  },
                },
                {
                  "name": "max",
                  "params": {
                    "max": 20,
                  },
                },
              ],
              "type": "string",
            },
          },
          "label": undefined,
          "meta": undefined,
          "notOneOf": [],
          "nullable": true,
          "oneOf": [],
          "optional": true,
          "tests": [],
          "type": "object",
        },
        "label": undefined,
        "meta": undefined,
        "notOneOf": [],
        "nullable": false,
        "oneOf": [],
        "optional": true,
        "tests": [
          {
            "name": "min",
            "params": {
              "min": 1,
            },
          },
          {
            "name": "max",
            "params": {
              "max": 5,
            },
          },
        ],
        "type": "array",
      },
    },
    "label": undefined,
    "meta": undefined,
    "notOneOf": [],
    "nullable": false,
    "oneOf": [],
    "optional": true,
    "tests": [],
    "type": "object",
  },
}
`;

exports[`generate validation > should return correct validationSchema for with nested surrounding containers 1`] = `
{
  "someRootNameInData": {
    "default": {
      "someInnerNameInData": {
        "value": undefined,
      },
      "someNameInData": {
        "value": undefined,
      },
    },
    "fields": {
      "someInnerNameInData": {
        "default": {
          "value": undefined,
        },
        "fields": {
          "value": {
            "default": undefined,
            "label": undefined,
            "meta": undefined,
            "notOneOf": [],
            "nullable": false,
            "oneOf": [],
            "optional": false,
            "tests": [
              {
                "name": "required",
                "params": undefined,
              },
              {
                "name": "matches",
                "params": {
                  "regex": /someRegex/,
                },
              },
            ],
            "type": "string",
          },
        },
        "label": undefined,
        "meta": undefined,
        "notOneOf": [],
        "nullable": true,
        "oneOf": [],
        "optional": true,
        "tests": [],
        "type": "object",
      },
      "someNameInData": {
        "default": {
          "value": undefined,
        },
        "fields": {
          "value": {
            "default": undefined,
            "label": undefined,
            "meta": undefined,
            "notOneOf": [],
            "nullable": false,
            "oneOf": [],
            "optional": false,
            "tests": [
              {
                "name": "required",
                "params": undefined,
              },
              {
                "name": "matches",
                "params": {
                  "regex": /someRegex/,
                },
              },
            ],
            "type": "string",
          },
        },
        "label": undefined,
        "meta": undefined,
        "notOneOf": [],
        "nullable": true,
        "oneOf": [],
        "optional": true,
        "tests": [],
        "type": "object",
      },
    },
    "label": undefined,
    "meta": undefined,
    "notOneOf": [],
    "nullable": false,
    "oneOf": [],
    "optional": true,
    "tests": [],
    "type": "object",
  },
}
`;

exports[`util functions > createYupArrayFromSchema > creates one Yup Array 1`] = `
ArraySchema {
  "_blacklist": Set {},
  "_typeCheck": [Function],
  "_whitelist": Set {},
  "conditions": [],
  "deps": [],
  "exclusiveTests": {
    "max": true,
    "min": true,
  },
  "innerType": ObjectSchema {
    "_blacklist": Set {},
    "_excludedEdges": [],
    "_mutate": undefined,
    "_nodes": [
      "person",
    ],
    "_sortErrors": [Function],
    "_typeCheck": [Function],
    "_whitelist": Set {},
    "conditions": [],
    "deps": [],
    "exclusiveTests": {},
    "fields": {
      "person": ObjectSchema {
        "_blacklist": Set {},
        "_excludedEdges": [],
        "_mutate": undefined,
        "_nodes": [
          "firstName",
        ],
        "_sortErrors": [Function],
        "_typeCheck": [Function],
        "_whitelist": Set {},
        "conditions": [],
        "deps": [],
        "exclusiveTests": {},
        "fields": {
          "firstName": StringSchema {
            "_blacklist": Set {},
            "_mutate": undefined,
            "_typeCheck": [Function],
            "_whitelist": Set {},
            "conditions": [],
            "deps": [],
            "exclusiveTests": {
              "required": false,
            },
            "internalTests": {
              "nullable": [Function],
              "optionality": [Function],
              "typeError": [Function],
            },
            "spec": {
              "abortEarly": true,
              "coerce": true,
              "disableStackTrace": false,
              "nullable": false,
              "optional": false,
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": [
              [Function],
            ],
            "transforms": [
              [Function],
            ],
            "type": "string",
          },
        },
        "internalTests": {
          "nullable": [Function],
          "typeError": [Function],
        },
        "spec": {
          "abortEarly": true,
          "coerce": true,
          "disableStackTrace": false,
          "nullable": false,
          "optional": true,
          "recursive": true,
          "strict": false,
          "strip": false,
        },
        "tests": [],
        "transforms": [],
        "type": "object",
      },
    },
    "internalTests": {
      "nullable": [Function],
      "typeError": [Function],
    },
    "spec": {
      "abortEarly": true,
      "coerce": true,
      "disableStackTrace": false,
      "nullable": false,
      "optional": true,
      "recursive": true,
      "strict": false,
      "strip": false,
    },
    "tests": [],
    "transforms": [],
    "type": "object",
  },
  "internalTests": {
    "nullable": [Function],
    "typeError": [Function],
  },
  "spec": {
    "abortEarly": true,
    "coerce": true,
    "disableStackTrace": false,
    "nullable": false,
    "optional": true,
    "recursive": true,
    "strict": false,
    "strip": false,
    "types": ObjectSchema {
      "_blacklist": Set {},
      "_excludedEdges": [],
      "_mutate": undefined,
      "_nodes": [
        "person",
      ],
      "_sortErrors": [Function],
      "_typeCheck": [Function],
      "_whitelist": Set {},
      "conditions": [],
      "deps": [],
      "exclusiveTests": {},
      "fields": {
        "person": ObjectSchema {
          "_blacklist": Set {},
          "_excludedEdges": [],
          "_mutate": undefined,
          "_nodes": [
            "firstName",
          ],
          "_sortErrors": [Function],
          "_typeCheck": [Function],
          "_whitelist": Set {},
          "conditions": [],
          "deps": [],
          "exclusiveTests": {},
          "fields": {
            "firstName": StringSchema {
              "_blacklist": Set {},
              "_mutate": undefined,
              "_typeCheck": [Function],
              "_whitelist": Set {},
              "conditions": [],
              "deps": [],
              "exclusiveTests": {
                "required": false,
              },
              "internalTests": {
                "nullable": [Function],
                "optionality": [Function],
                "typeError": [Function],
              },
              "spec": {
                "abortEarly": true,
                "coerce": true,
                "disableStackTrace": false,
                "nullable": false,
                "optional": false,
                "recursive": true,
                "strict": false,
                "strip": false,
              },
              "tests": [
                [Function],
              ],
              "transforms": [
                [Function],
              ],
              "type": "string",
            },
          },
          "internalTests": {
            "nullable": [Function],
            "typeError": [Function],
          },
          "spec": {
            "abortEarly": true,
            "coerce": true,
            "disableStackTrace": false,
            "nullable": false,
            "optional": true,
            "recursive": true,
            "strict": false,
            "strip": false,
          },
          "tests": [],
          "transforms": [],
          "type": "object",
        },
      },
      "internalTests": {
        "nullable": [Function],
        "typeError": [Function],
      },
      "spec": {
        "abortEarly": true,
        "coerce": true,
        "disableStackTrace": false,
        "nullable": false,
        "optional": true,
        "recursive": true,
        "strict": false,
        "strip": false,
      },
      "tests": [],
      "transforms": [],
      "type": "object",
    },
  },
  "tests": [
    [Function],
    [Function],
  ],
  "transforms": [],
  "type": "array",
}
`;
